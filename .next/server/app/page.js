/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/page";
exports.ids = ["app/page"];
exports.modules = {

/***/ "./action-async-storage.external":
/*!****************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external");

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "./request-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "./static-generation-async-storage.external":
/*!***************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external" ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "aws-amplify":
/*!******************************!*\
  !*** external "aws-amplify" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("aws-amplify");

/***/ }),

/***/ "aws-amplify/api":
/*!**********************************!*\
  !*** external "aws-amplify/api" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("aws-amplify/api");

/***/ }),

/***/ "aws-amplify/auth":
/*!***********************************!*\
  !*** external "aws-amplify/auth" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("aws-amplify/auth");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-page/module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js?d969\");\n/* harmony import */ var next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/client/components/error-boundary */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/./node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"originalPathname\",\"__next_app__\",\"routeModule\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\"TURBOPACK { transition: next-ssr }\";\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: ['__PAGE__', {}, {\n          page: [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\")), \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\page.tsx\"],\n          \n        }]\n      },\n        {\n        'layout': [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/layout.tsx */ \"(rsc)/./src/app/layout.tsx\")), \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\layout.tsx\"],\n'not-found': [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/not-found-error */ \"(rsc)/./node_modules/next/dist/client/components/not-found-error.js\", 23)), \"next/dist/client/components/not-found-error\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\page.tsx\"];\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst originalPathname = \"/page\";\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\",\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    }\n});\n\n//# sourceMappingURL=app-page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZwYWdlJnBhZ2U9JTJGcGFnZSZhcHBQYXRocz0lMkZwYWdlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGcGFnZS50c3gmYXBwRGlyPUMlM0ElNUNVc2VycyU1Q2FrYWJvJTVDT25lRHJpdmUlNUNEb2N1bWVudHMlNUNhYmhoJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNha2FibyU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDYWJoaCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGFBQWEsc0JBQXNCO0FBQ2lFO0FBQ3JDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyx1QkFBdUIsZ0pBQW9HO0FBQzNIO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLHlCQUF5QixvSkFBc0c7QUFDL0gsb0JBQW9CLDBOQUFnRjtBQUNwRztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDdUI7QUFDNkQ7QUFDcEYsNkJBQTZCLG1CQUFtQjtBQUNoRDtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDTyx3QkFBd0IsOEdBQWtCO0FBQ2pEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludGVydmlldy1zYWFzLz8zZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwiVFVSQk9QQUNLIHsgdHJhbnNpdGlvbjogbmV4dC1zc3IgfVwiO1xuaW1wb3J0IHsgQXBwUGFnZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuLy8gV2UgaW5qZWN0IHRoZSB0cmVlIGFuZCBwYWdlcyBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgdHJlZSA9IHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgJycsXG4gICAgICAgIHtcbiAgICAgICAgY2hpbGRyZW46IFsnX19QQUdFX18nLCB7fSwge1xuICAgICAgICAgIHBhZ2U6IFsoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXHNyY1xcXFxhcHBcXFxccGFnZS50c3hcIiksIFwiQzpcXFxcVXNlcnNcXFxcYWthYm9cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXGFiaGhcXFxcc3JjXFxcXGFwcFxcXFxwYWdlLnRzeFwiXSxcbiAgICAgICAgICBcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgJ2xheW91dCc6IFsoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXHNyY1xcXFxhcHBcXFxcbGF5b3V0LnRzeFwiKSwgXCJDOlxcXFxVc2Vyc1xcXFxha2Fib1xcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcYWJoaFxcXFxzcmNcXFxcYXBwXFxcXGxheW91dC50c3hcIl0sXG4nbm90LWZvdW5kJzogWygpID0+IGltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC1lcnJvclwiKSwgXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbm90LWZvdW5kLWVycm9yXCJdLFxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIF1cbiAgICAgIH0uY2hpbGRyZW47XG5jb25zdCBwYWdlcyA9IFtcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXHNyY1xcXFxhcHBcXFxccGFnZS50c3hcIl07XG5leHBvcnQgeyB0cmVlLCBwYWdlcyB9O1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxFcnJvciB9IGZyb20gXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcnlcIjtcbmNvbnN0IF9fbmV4dF9hcHBfcmVxdWlyZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfX1xuY29uc3QgX19uZXh0X2FwcF9sb2FkX2NodW5rX18gPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKVxuZXhwb3J0IGNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9wYWdlXCI7XG5leHBvcnQgY29uc3QgX19uZXh0X2FwcF9fID0ge1xuICAgIHJlcXVpcmU6IF9fbmV4dF9hcHBfcmVxdWlyZV9fLFxuICAgIGxvYWRDaHVuazogX19uZXh0X2FwcF9sb2FkX2NodW5rX19cbn07XG5leHBvcnQgKiBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL2VudHJ5LWJhc2VcIjtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFBhZ2VSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1BBR0UsXG4gICAgICAgIHBhZ2U6IFwiL3BhZ2VcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiLFxuICAgICAgICBhcHBQYXRoczogW11cbiAgICB9LFxuICAgIHVzZXJsYW5kOiB7XG4gICAgICAgIGxvYWRlclRyZWU6IHRyZWVcbiAgICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXBhZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Capp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Capp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/app-router.js */ \"(ssr)/./node_modules/next/dist/client/components/app-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(ssr)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/not-found-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/not-found-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDYXBwLXJvdXRlci5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNha2FibyU1QyU1Q09uZURyaXZlJTVDJTVDRG9jdW1lbnRzJTVDJTVDYWJoaCU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDY2xpZW50JTVDJTVDY29tcG9uZW50cyU1QyU1Q2NsaWVudC1wYWdlLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDZXJyb3ItYm91bmRhcnkuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDYWthYm8lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q2FiaGglNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZGlzdCU1QyU1Q2NsaWVudCU1QyU1Q2NvbXBvbmVudHMlNUMlNUNsYXlvdXQtcm91dGVyLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDbm90LWZvdW5kLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNjbGllbnQlNUMlNUNjb21wb25lbnRzJTVDJTVDcmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsa09BQTZJO0FBQzdJO0FBQ0Esb09BQThJO0FBQzlJO0FBQ0EsME9BQWlKO0FBQ2pKO0FBQ0Esd09BQWdKO0FBQ2hKO0FBQ0Esa1BBQXFKO0FBQ3JKO0FBQ0Esc1FBQStKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW50ZXJ2aWV3LXNhYXMvP2E5NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxha2Fib1xcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcYWJoaFxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXGNsaWVudFxcXFxjb21wb25lbnRzXFxcXGFwcC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcY2xpZW50LXBhZ2UuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxcbGF5b3V0LXJvdXRlci5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcYWthYm9cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXGFiaGhcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcY29tcG9uZW50c1xcXFxub3QtZm91bmQtYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGFrYWJvXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxhYmhoXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcY2xpZW50XFxcXGNvbXBvbmVudHNcXFxccmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Capp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/AuthContext.tsx */ \"(ssr)/./src/contexts/AuthContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2ZvbnQlNUMlNUNnb29nbGUlNUMlNUN0YXJnZXQuY3NzJTNGJTdCJTVDJTIycGF0aCU1QyUyMiUzQSU1QyUyMnNyYyU1QyU1QyU1QyU1Q2FwcCU1QyU1QyU1QyU1Q2xheW91dC50c3glNUMlMjIlMkMlNUMlMjJpbXBvcnQlNUMlMjIlM0ElNUMlMjJJbnRlciU1QyUyMiUyQyU1QyUyMmFyZ3VtZW50cyU1QyUyMiUzQSU1QiU3QiU1QyUyMnN1YnNldHMlNUMlMjIlM0ElNUIlNUMlMjJsYXRpbiU1QyUyMiU1RCU3RCU1RCUyQyU1QyUyMnZhcmlhYmxlTmFtZSU1QyUyMiUzQSU1QyUyMmludGVyJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDc3JjJTVDJTVDYXBwJTVDJTVDZ2xvYmFscy5jc3MlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDYWthYm8lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q2FiaGglNUMlNUNzcmMlNUMlNUNjb250ZXh0cyU1QyU1Q0F1dGhDb250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMkF1dGhQcm92aWRlciUyMiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsd0tBQWtKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW50ZXJ2aWV3LXNhYXMvP2U1NWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJBdXRoUHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxha2Fib1xcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcYWJoaFxcXFxzcmNcXFxcY29udGV4dHNcXFxcQXV0aENvbnRleHQudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!*****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(ssr)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q2FrYWJvJTVDJTVDT25lRHJpdmUlNUMlNUNEb2N1bWVudHMlNUMlNUNhYmhoJTVDJTVDc3JjJTVDJTVDYXBwJTVDJTVDcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPXRydWUhIiwibWFwcGluZ3MiOiJBQUFBLGdKQUFvRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludGVydmlldy1zYWFzLz9kYTIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcYWthYm9cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXGFiaGhcXFxcc3JjXFxcXGFwcFxcXFxwYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cakabo%5C%5COneDrive%5C%5CDocuments%5C%5Cabhh%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./src/API.ts":
/*!********************!*\
  !*** ./src/API.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplicationStatus: () => (/* binding */ ApplicationStatus),\n/* harmony export */   ApprovalStatus: () => (/* binding */ ApprovalStatus),\n/* harmony export */   InterviewRecommendation: () => (/* binding */ InterviewRecommendation),\n/* harmony export */   InterviewStatus: () => (/* binding */ InterviewStatus),\n/* harmony export */   InterviewType: () => (/* binding */ InterviewType),\n/* harmony export */   JobStatus: () => (/* binding */ JobStatus),\n/* harmony export */   JobType: () => (/* binding */ JobType),\n/* harmony export */   ModelAttributeTypes: () => (/* binding */ ModelAttributeTypes),\n/* harmony export */   ModelSortDirection: () => (/* binding */ ModelSortDirection),\n/* harmony export */   StageStatus: () => (/* binding */ StageStatus),\n/* harmony export */   TestAttemptStatus: () => (/* binding */ TestAttemptStatus),\n/* harmony export */   UserRole: () => (/* binding */ UserRole),\n/* harmony export */   VideoTestAttemptStatus: () => (/* binding */ VideoTestAttemptStatus)\n/* harmony export */ });\n/* tslint:disable */ /* eslint-disable */ //  This file was automatically generated and should not be edited.\nvar UserRole;\n(function(UserRole) {\n    UserRole[\"SUPER_ADMIN\"] = \"SUPER_ADMIN\";\n    UserRole[\"COMPANY_ADMIN\"] = \"COMPANY_ADMIN\";\n    UserRole[\"CANDIDATE\"] = \"CANDIDATE\";\n})(UserRole || (UserRole = {}));\nvar ApprovalStatus;\n(function(ApprovalStatus) {\n    ApprovalStatus[\"PENDING\"] = \"PENDING\";\n    ApprovalStatus[\"APPROVED\"] = \"APPROVED\";\n    ApprovalStatus[\"REJECTED\"] = \"REJECTED\";\n})(ApprovalStatus || (ApprovalStatus = {}));\nvar ModelAttributeTypes;\n(function(ModelAttributeTypes) {\n    ModelAttributeTypes[\"binary\"] = \"binary\";\n    ModelAttributeTypes[\"binarySet\"] = \"binarySet\";\n    ModelAttributeTypes[\"bool\"] = \"bool\";\n    ModelAttributeTypes[\"list\"] = \"list\";\n    ModelAttributeTypes[\"map\"] = \"map\";\n    ModelAttributeTypes[\"number\"] = \"number\";\n    ModelAttributeTypes[\"numberSet\"] = \"numberSet\";\n    ModelAttributeTypes[\"string\"] = \"string\";\n    ModelAttributeTypes[\"stringSet\"] = \"stringSet\";\n    ModelAttributeTypes[\"_null\"] = \"_null\";\n})(ModelAttributeTypes || (ModelAttributeTypes = {}));\nvar JobType;\n(function(JobType) {\n    JobType[\"FULL_TIME\"] = \"FULL_TIME\";\n    JobType[\"PART_TIME\"] = \"PART_TIME\";\n    JobType[\"CONTRACT\"] = \"CONTRACT\";\n    JobType[\"INTERNSHIP\"] = \"INTERNSHIP\";\n})(JobType || (JobType = {}));\nvar JobStatus;\n(function(JobStatus) {\n    JobStatus[\"ACTIVE\"] = \"ACTIVE\";\n    JobStatus[\"PAUSED\"] = \"PAUSED\";\n    JobStatus[\"CLOSED\"] = \"CLOSED\";\n})(JobStatus || (JobStatus = {}));\nvar ApplicationStatus;\n(function(ApplicationStatus) {\n    ApplicationStatus[\"ACTIVE\"] = \"ACTIVE\";\n    ApplicationStatus[\"REJECTED\"] = \"REJECTED\";\n    ApplicationStatus[\"HIRED\"] = \"HIRED\";\n    ApplicationStatus[\"WITHDRAWN\"] = \"WITHDRAWN\";\n})(ApplicationStatus || (ApplicationStatus = {}));\nvar StageStatus;\n(function(StageStatus) {\n    StageStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n    StageStatus[\"PENDING\"] = \"PENDING\";\n    StageStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    StageStatus[\"COMPLETED\"] = \"COMPLETED\";\n    StageStatus[\"FAILED\"] = \"FAILED\";\n    StageStatus[\"SCHEDULED\"] = \"SCHEDULED\";\n})(StageStatus || (StageStatus = {}));\nvar TestAttemptStatus;\n(function(TestAttemptStatus) {\n    TestAttemptStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    TestAttemptStatus[\"COMPLETED\"] = \"COMPLETED\";\n    TestAttemptStatus[\"ABANDONED\"] = \"ABANDONED\";\n    TestAttemptStatus[\"EXPIRED\"] = \"EXPIRED\";\n})(TestAttemptStatus || (TestAttemptStatus = {}));\nvar VideoTestAttemptStatus;\n(function(VideoTestAttemptStatus) {\n    VideoTestAttemptStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n    VideoTestAttemptStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    VideoTestAttemptStatus[\"COMPLETED\"] = \"COMPLETED\";\n    VideoTestAttemptStatus[\"ABANDONED\"] = \"ABANDONED\";\n})(VideoTestAttemptStatus || (VideoTestAttemptStatus = {}));\nvar InterviewType;\n(function(InterviewType) {\n    InterviewType[\"PHONE\"] = \"PHONE\";\n    InterviewType[\"VIDEO\"] = \"VIDEO\";\n    InterviewType[\"IN_PERSON\"] = \"IN_PERSON\";\n})(InterviewType || (InterviewType = {}));\nvar InterviewStatus;\n(function(InterviewStatus) {\n    InterviewStatus[\"SCHEDULED\"] = \"SCHEDULED\";\n    InterviewStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    InterviewStatus[\"COMPLETED\"] = \"COMPLETED\";\n    InterviewStatus[\"CANCELLED\"] = \"CANCELLED\";\n    InterviewStatus[\"NO_SHOW\"] = \"NO_SHOW\";\n})(InterviewStatus || (InterviewStatus = {}));\nvar InterviewRecommendation;\n(function(InterviewRecommendation) {\n    InterviewRecommendation[\"STRONG_HIRE\"] = \"STRONG_HIRE\";\n    InterviewRecommendation[\"HIRE\"] = \"HIRE\";\n    InterviewRecommendation[\"NO_HIRE\"] = \"NO_HIRE\";\n    InterviewRecommendation[\"STRONG_NO_HIRE\"] = \"STRONG_NO_HIRE\";\n})(InterviewRecommendation || (InterviewRecommendation = {}));\nvar ModelSortDirection;\n(function(ModelSortDirection) {\n    ModelSortDirection[\"ASC\"] = \"ASC\";\n    ModelSortDirection[\"DESC\"] = \"DESC\";\n})(ModelSortDirection || (ModelSortDirection = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/API.ts\n");

/***/ }),

/***/ "(ssr)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HomePage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(ssr)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nfunction HomePage() {\n    const { user, userRole, loading } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!loading) {\n            if (!user) {\n                router.push(\"/login\");\n            } else {\n                // Redirect based on role\n                switch(userRole){\n                    case \"super_admin\":\n                        router.push(\"/admin/dashboard\");\n                        break;\n                    case \"company_admin\":\n                        router.push(\"/company/dashboard\");\n                        break;\n                    case \"candidate\":\n                        router.push(\"/candidate/dashboard\");\n                        break;\n                    default:\n                        router.push(\"/login\");\n                }\n            }\n        }\n    }, [\n        user,\n        userRole,\n        loading,\n        router\n    ]);\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen flex items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-lg\",\n                children: \"Loading...\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\page.tsx\",\n                lineNumber: 37,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\page.tsx\",\n            lineNumber: 36,\n            columnNumber: 7\n        }, this);\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvYXBwL3BhZ2UudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRWtDO0FBQ2U7QUFDTDtBQUU3QixTQUFTRztJQUN0QixNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUUsR0FBR0wsOERBQU9BO0lBQzNDLE1BQU1NLFNBQVNMLDBEQUFTQTtJQUV4QkYsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNNLFNBQVM7WUFDWixJQUFJLENBQUNGLE1BQU07Z0JBQ1RHLE9BQU9DLElBQUksQ0FBQztZQUNkLE9BQU87Z0JBQ0wseUJBQXlCO2dCQUN6QixPQUFRSDtvQkFDTixLQUFLO3dCQUNIRSxPQUFPQyxJQUFJLENBQUM7d0JBQ1o7b0JBQ0YsS0FBSzt3QkFDSEQsT0FBT0MsSUFBSSxDQUFDO3dCQUNaO29CQUNGLEtBQUs7d0JBQ0hELE9BQU9DLElBQUksQ0FBQzt3QkFDWjtvQkFDRjt3QkFDRUQsT0FBT0MsSUFBSSxDQUFDO2dCQUNoQjtZQUNGO1FBQ0Y7SUFDRixHQUFHO1FBQUNKO1FBQU1DO1FBQVVDO1FBQVNDO0tBQU87SUFFcEMsSUFBSUQsU0FBUztRQUNYLHFCQUNFLDhEQUFDRztZQUFJQyxXQUFVO3NCQUNiLDRFQUFDRDtnQkFBSUMsV0FBVTswQkFBVTs7Ozs7Ozs7Ozs7SUFHL0I7SUFFQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlcnZpZXctc2Fhcy8uL3NyYy9hcHAvcGFnZS50c3g/ZjY4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIkAvY29udGV4dHMvQXV0aENvbnRleHRcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZVBhZ2UoKSB7XHJcbiAgY29uc3QgeyB1c2VyLCB1c2VyUm9sZSwgbG9hZGluZyB9ID0gdXNlQXV0aCgpO1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKCFsb2FkaW5nKSB7XHJcbiAgICAgIGlmICghdXNlcikge1xyXG4gICAgICAgIHJvdXRlci5wdXNoKFwiL2xvZ2luXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlZGlyZWN0IGJhc2VkIG9uIHJvbGVcclxuICAgICAgICBzd2l0Y2ggKHVzZXJSb2xlKSB7XHJcbiAgICAgICAgICBjYXNlIFwic3VwZXJfYWRtaW5cIjpcclxuICAgICAgICAgICAgcm91dGVyLnB1c2goXCIvYWRtaW4vZGFzaGJvYXJkXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJjb21wYW55X2FkbWluXCI6XHJcbiAgICAgICAgICAgIHJvdXRlci5wdXNoKFwiL2NvbXBhbnkvZGFzaGJvYXJkXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJjYW5kaWRhdGVcIjpcclxuICAgICAgICAgICAgcm91dGVyLnB1c2goXCIvY2FuZGlkYXRlL2Rhc2hib2FyZFwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByb3V0ZXIucHVzaChcIi9sb2dpblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbdXNlciwgdXNlclJvbGUsIGxvYWRpbmcsIHJvdXRlcl0pO1xyXG5cclxuICBpZiAobG9hZGluZykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbGdcIj5Mb2FkaW5nLi4uPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VBdXRoIiwidXNlUm91dGVyIiwiSG9tZVBhZ2UiLCJ1c2VyIiwidXNlclJvbGUiLCJsb2FkaW5nIiwicm91dGVyIiwicHVzaCIsImRpdiIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/app/page.tsx\n");

/***/ }),

/***/ "(ssr)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _services_userService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/userService */ \"(ssr)/./src/services/userService.ts\");\n/* harmony import */ var _API__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/API */ \"(ssr)/./src/API.ts\");\n/* harmony import */ var _lib_mockServices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/mockServices */ \"(ssr)/./src/lib/mockServices.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \n\n\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\nconst AuthProvider = ({ children })=>{\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userRole, setUserRoleState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [amplifyReady, setAmplifyReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initializeAuth = async ()=>{\n            try {\n                // Check if we have a demo user in localStorage first\n                if (false) {}\n                // Try to initialize real Amplify\n                const amplifyConfig = await __webpack_require__.e(/*! import() */ \"_ssr_src_lib_amplify-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/amplify-config */ \"(ssr)/./src/lib/amplify-config.ts\"));\n                const isRealAmplify = amplifyConfig.configureAmplify();\n                setAmplifyReady(isRealAmplify);\n                if (isRealAmplify) {\n                    await checkUser();\n                } else {\n                    // Use mock mode\n                    console.log(\"Running in mock authentication mode\");\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.warn(\"Failed to initialize auth, using mock mode:\", error);\n                setAmplifyReady(false);\n                setLoading(false);\n            }\n        };\n        initializeAuth();\n    }, []);\n    const checkUser = async ()=>{\n        try {\n            // Try to get current user with real Amplify\n            const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n            const currentUser = await amplifyAuth.getCurrentUser();\n            setUser(currentUser);\n            console.log(\"✅ Current user found:\", currentUser);\n            // Try to get user role from attributes first, then fall back to email pattern\n            let role = null;\n            let attributes = {};\n            try {\n                attributes = await amplifyAuth.fetchUserAttributes();\n                console.log(\"\\uD83D\\uDCCB User attributes:\", attributes);\n                // Check for custom role attribute first\n                const roleAttribute = attributes[\"custom:role\"];\n                if (roleAttribute) {\n                    role = roleAttribute;\n                }\n                // If no custom role, check Cognito groups\n                if (!role) {\n                    try {\n                        const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                        const cognitoUser = await amplifyAuth.getCurrentUser();\n                        const session = await amplifyAuth.fetchAuthSession();\n                        // Check groups from the JWT token\n                        const groups = session?.tokens?.accessToken?.payload?.[\"cognito:groups\"] || [];\n                        console.log(\"\\uD83D\\uDD0D User groups from JWT:\", groups);\n                        if (groups.includes(\"super_admin\")) {\n                            role = \"super_admin\";\n                        } else if (groups.includes(\"company_admin\")) {\n                            role = \"company_admin\";\n                        } else if (groups.includes(\"candidate\")) {\n                            role = \"candidate\";\n                        }\n                    } catch (groupError) {\n                        console.warn(\"⚠️ Could not fetch user groups:\", groupError);\n                    }\n                }\n            } catch (attrError) {\n                console.log(\"⚠️ Could not fetch user attributes:\", attrError);\n            }\n            // If no role from attributes, determine from email pattern\n            if (!role && currentUser?.username) {\n                // First try to get email from attributes, fallback to username\n                const email = attributes.email || currentUser.username;\n                if (email.includes(\"admin\") && !email.includes(\"company\")) {\n                    role = \"super_admin\";\n                } else if (email.includes(\"company\")) {\n                    role = \"company_admin\";\n                } else {\n                    role = \"candidate\";\n                }\n                console.log(`🔍 Determined role from email pattern (${email}): ${role}`);\n            }\n            setUserRoleState(role);\n            console.log(`👤 User role set to: ${role}`);\n            // Ensure user record exists in our database (skip for demo mode)\n            if (!currentUser?.userId?.startsWith(\"demo-\")) {\n                await ensureUserRecord(currentUser, role);\n            }\n            // Auto-redirect based on role if on home page or login page\n            if (false) {}\n        } catch (error) {\n            console.log(\"❌ No authenticated user found:\", error);\n            setUser(null);\n            setUserRoleState(null);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const ensureUserRecord = async (cognitoUser, role)=>{\n        if (!cognitoUser?.userId || !role) return;\n        try {\n            // Check if user already exists in our database\n            const existingUser = await _services_userService__WEBPACK_IMPORTED_MODULE_3__.userService.getUserBySub(cognitoUser.userId);\n            if (!existingUser) {\n                console.log(\"\\uD83D\\uDD04 Creating user record in database...\");\n                // Get additional user details\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                let attributes = {};\n                try {\n                    attributes = await amplifyAuth.fetchUserAttributes();\n                } catch (error) {\n                    console.warn(\"Could not fetch user attributes:\", error);\n                }\n                // Create user record\n                const newUser = await _services_userService__WEBPACK_IMPORTED_MODULE_3__.userService.createUser({\n                    sub: cognitoUser.userId,\n                    email: attributes.email || cognitoUser.username || \"\",\n                    firstName: attributes.given_name || \"User\",\n                    lastName: attributes.family_name || \"Name\",\n                    phone: attributes.phone_number,\n                    role: role === \"super_admin\" ? _API__WEBPACK_IMPORTED_MODULE_4__.UserRole.SUPER_ADMIN : role === \"company_admin\" ? _API__WEBPACK_IMPORTED_MODULE_4__.UserRole.COMPANY_ADMIN : _API__WEBPACK_IMPORTED_MODULE_4__.UserRole.CANDIDATE,\n                    isActive: true\n                });\n                console.log(\"✅ User record created:\", newUser);\n            } else {\n                console.log(\"✅ User record already exists in database\");\n            }\n        } catch (error) {\n            console.error(\"❌ Error ensuring user record:\", error);\n        // Don't throw - authentication can continue even if user record creation fails\n        }\n    };\n    const redirectByRole = (role)=>{\n        console.log(`🚀 Redirecting based on role: ${role}`);\n        switch(role){\n            case \"super_admin\":\n                console.log(\"\\uD83D\\uDCCD Redirecting to admin dashboard\");\n                router.push(\"/admin/dashboard\");\n                break;\n            case \"company_admin\":\n                console.log(\"\\uD83D\\uDCCD Redirecting to company dashboard\");\n                router.push(\"/company/dashboard\");\n                break;\n            case \"candidate\":\n                console.log(\"\\uD83D\\uDCCD Redirecting to candidate dashboard\");\n                router.push(\"/candidate/dashboard\");\n                break;\n            default:\n                console.log(\"\\uD83D\\uDCCD Redirecting to login\");\n                router.push(\"/login\");\n        }\n    };\n    const handleSignIn = async (email, password)=>{\n        console.log(\"\\uD83D\\uDD10 Attempting authentication for:\", email);\n        // Check if this is a demo account first\n        const isDemoAccount = [\n            \"admin@abhh.demo\",\n            \"company@techcorp.demo\",\n            \"candidate@demo.com\"\n        ].includes(email);\n        if (isDemoAccount) {\n            console.log(\"\\uD83C\\uDFAD Demo account detected, using mock authentication\");\n            // Simulate authentication delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Create mock user object\n            const mockUser = {\n                username: email,\n                userId: `demo-${Date.now()}`,\n                attributes: {\n                    email: email,\n                    given_name: email.split(\"@\")[0].charAt(0).toUpperCase() + email.split(\"@\")[0].slice(1),\n                    family_name: \"Demo\"\n                }\n            };\n            setUser(mockUser);\n            // Set role based on demo email pattern\n            let role = \"candidate\";\n            if (email === \"admin@abhh.demo\") {\n                role = \"super_admin\";\n            } else if (email === \"company@techcorp.demo\") {\n                role = \"company_admin\";\n            } else if (email === \"candidate@demo.com\") {\n                role = \"candidate\";\n            }\n            console.log(`👤 Demo user role assigned: ${role}`);\n            setUserRoleState(role);\n            // Set mock mode in localStorage for services to detect\n            (0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_5__.setMockMode)(mockUser);\n            redirectByRole(role);\n            return {\n                isSignedIn: true,\n                user: mockUser\n            };\n        }\n        // For non-demo accounts, try real Cognito authentication\n        try {\n            console.log(\"☁️ Attempting real Cognito authentication\");\n            const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n            // Check if there's already a signed-in user and sign them out first\n            try {\n                const currentUser = await amplifyAuth.getCurrentUser();\n                if (currentUser) {\n                    console.log(\"\\uD83D\\uDD04 Signing out existing user before new authentication\");\n                    await amplifyAuth.signOut();\n                }\n            } catch (err) {\n                // No current user or already signed out, continue\n                console.log(\"ℹ️ No existing user session found\");\n            }\n            const result = await amplifyAuth.signIn({\n                username: email,\n                password\n            });\n            console.log(\"✅ Cognito sign in successful:\", result);\n            // Refresh user state after sign in\n            await checkUser();\n            return result;\n        } catch (error) {\n            console.error(\"❌ Amplify sign in error:\", error);\n            throw error; // Don't fall back for non-demo accounts\n        }\n    };\n    const handleSignUp = async (email, password, attributes = {})=>{\n        console.log(\"\\uD83D\\uDD10 Attempting user registration for:\", email);\n        if (amplifyReady) {\n            try {\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                const result = await amplifyAuth.signUp({\n                    username: email,\n                    password,\n                    options: {\n                        userAttributes: {\n                            email,\n                            \"custom:role\": \"candidate\",\n                            ...attributes\n                        }\n                    }\n                });\n                return result;\n            } catch (error) {\n                console.error(\"Amplify sign up error:\", error);\n                throw error;\n            }\n        } else {\n            // Mock sign up\n            console.log(\"Mock sign up:\", email);\n            return {\n                isSignUpComplete: false,\n                userId: \"mock-user-id\"\n            };\n        }\n    };\n    const handleSignOut = async ()=>{\n        if (amplifyReady) {\n            try {\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                await amplifyAuth.signOut();\n            } catch (error) {\n                console.error(\"Amplify sign out error:\", error);\n            }\n        }\n        setUser(null);\n        setUserRoleState(null);\n        (0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_5__.clearMockMode)(); // Clear mock mode on sign out\n        router.push(\"/login\");\n    };\n    const handleConfirmSignUp = async (email, code)=>{\n        if (amplifyReady) {\n            try {\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                const result = await amplifyAuth.confirmSignUp({\n                    username: email,\n                    confirmationCode: code\n                });\n                return result;\n            } catch (error) {\n                console.error(\"Amplify confirm sign up error:\", error);\n                throw error;\n            }\n        } else {\n            console.log(\"Mock confirm sign up:\", email, code);\n            return {\n                isSignUpComplete: true\n            };\n        }\n    };\n    const handleResendConfirmation = async (email)=>{\n        if (amplifyReady) {\n            try {\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                const result = await amplifyAuth.resendSignUpCode({\n                    username: email\n                });\n                return result;\n            } catch (error) {\n                console.error(\"Amplify resend confirmation error:\", error);\n                throw error;\n            }\n        } else {\n            console.log(\"Mock resend confirmation:\", email);\n            return {\n                deliveryMedium: \"EMAIL\"\n            };\n        }\n    };\n    const setUserRole = async (role)=>{\n        if (amplifyReady) {\n            try {\n                const amplifyAuth = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! aws-amplify/auth */ \"aws-amplify/auth\", 23));\n                await amplifyAuth.updateUserAttributes({\n                    userAttributes: {\n                        \"custom:role\": role\n                    }\n                });\n            } catch (error) {\n                console.error(\"Amplify update user attributes error:\", error);\n                throw error;\n            }\n        }\n        setUserRoleState(role);\n    };\n    const value = {\n        user,\n        userRole,\n        loading,\n        signIn: handleSignIn,\n        signUp: handleSignUp,\n        signOut: handleSignOut,\n        confirmSignUp: handleConfirmSignUp,\n        resendConfirmation: handleResendConfirmation,\n        setUserRole,\n        amplifyReady\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\contexts\\\\AuthContext.tsx\",\n        lineNumber: 453,\n        columnNumber: 10\n    }, undefined);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/contexts/AuthContext.tsx\n");

/***/ }),

/***/ "(ssr)/./src/graphql/mutations.js":
/*!**********************************!*\
  !*** ./src/graphql/mutations.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createApplication: () => (/* binding */ createApplication),\n/* harmony export */   createCompany: () => (/* binding */ createCompany),\n/* harmony export */   createInterview: () => (/* binding */ createInterview),\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   createTest: () => (/* binding */ createTest),\n/* harmony export */   createTestAttempt: () => (/* binding */ createTestAttempt),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   createVideoTest: () => (/* binding */ createVideoTest),\n/* harmony export */   createVideoTestAttempt: () => (/* binding */ createVideoTestAttempt),\n/* harmony export */   deleteApplication: () => (/* binding */ deleteApplication),\n/* harmony export */   deleteCompany: () => (/* binding */ deleteCompany),\n/* harmony export */   deleteInterview: () => (/* binding */ deleteInterview),\n/* harmony export */   deleteJob: () => (/* binding */ deleteJob),\n/* harmony export */   deleteTest: () => (/* binding */ deleteTest),\n/* harmony export */   deleteTestAttempt: () => (/* binding */ deleteTestAttempt),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   deleteVideoTest: () => (/* binding */ deleteVideoTest),\n/* harmony export */   deleteVideoTestAttempt: () => (/* binding */ deleteVideoTestAttempt),\n/* harmony export */   updateApplication: () => (/* binding */ updateApplication),\n/* harmony export */   updateCompany: () => (/* binding */ updateCompany),\n/* harmony export */   updateInterview: () => (/* binding */ updateInterview),\n/* harmony export */   updateJob: () => (/* binding */ updateJob),\n/* harmony export */   updateTest: () => (/* binding */ updateTest),\n/* harmony export */   updateTestAttempt: () => (/* binding */ updateTestAttempt),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateVideoTest: () => (/* binding */ updateVideoTest),\n/* harmony export */   updateVideoTestAttempt: () => (/* binding */ updateVideoTestAttempt)\n/* harmony export */ });\n/* eslint-disable */ // this is an auto generated file. This will be overwritten\nconst createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      id\n      sub\n      email\n      firstName\n      lastName\n      phone\n      role\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      lastLoginAt\n      createdAt\n      updatedAt\n      approvalStatus\n      approvedAt\n      approvedBy\n      approvalNotes\n      rejectedAt\n      rejectedBy\n      rejectionReason\n      resume\n      applications {\n        nextToken\n        __typename\n      }\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      __typename\n    }\n  }\n`;\nconst updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      id\n      sub\n      email\n      firstName\n      lastName\n      phone\n      role\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      lastLoginAt\n      createdAt\n      updatedAt\n      approvalStatus\n      approvedAt\n      approvedBy\n      approvalNotes\n      rejectedAt\n      rejectedBy\n      rejectionReason\n      resume\n      applications {\n        nextToken\n        __typename\n      }\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      __typename\n    }\n  }\n`;\nconst deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      id\n      sub\n      email\n      firstName\n      lastName\n      phone\n      role\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      lastLoginAt\n      createdAt\n      updatedAt\n      approvalStatus\n      approvedAt\n      approvedBy\n      approvalNotes\n      rejectedAt\n      rejectedBy\n      rejectionReason\n      resume\n      applications {\n        nextToken\n        __typename\n      }\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      __typename\n    }\n  }\n`;\nconst createCompany = /* GraphQL */ `\n  mutation CreateCompany(\n    $input: CreateCompanyInput!\n    $condition: ModelCompanyConditionInput\n  ) {\n    createCompany(input: $input, condition: $condition) {\n      id\n      name\n      email\n      phone\n      address\n      website\n      logo\n      description\n      isActive\n      admins {\n        nextToken\n        __typename\n      }\n      jobs {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateCompany = /* GraphQL */ `\n  mutation UpdateCompany(\n    $input: UpdateCompanyInput!\n    $condition: ModelCompanyConditionInput\n  ) {\n    updateCompany(input: $input, condition: $condition) {\n      id\n      name\n      email\n      phone\n      address\n      website\n      logo\n      description\n      isActive\n      admins {\n        nextToken\n        __typename\n      }\n      jobs {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteCompany = /* GraphQL */ `\n  mutation DeleteCompany(\n    $input: DeleteCompanyInput!\n    $condition: ModelCompanyConditionInput\n  ) {\n    deleteCompany(input: $input, condition: $condition) {\n      id\n      name\n      email\n      phone\n      address\n      website\n      logo\n      description\n      isActive\n      admins {\n        nextToken\n        __typename\n      }\n      jobs {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createJob = /* GraphQL */ `\n  mutation CreateJob(\n    $input: CreateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    createJob(input: $input, condition: $condition) {\n      id\n      title\n      department\n      location\n      type\n      salary\n      description\n      requirements\n      responsibilities\n      benefits\n      status\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      applications {\n        nextToken\n        __typename\n      }\n      tests {\n        nextToken\n        __typename\n      }\n      videoTests {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      closingDate\n      __typename\n    }\n  }\n`;\nconst updateJob = /* GraphQL */ `\n  mutation UpdateJob(\n    $input: UpdateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    updateJob(input: $input, condition: $condition) {\n      id\n      title\n      department\n      location\n      type\n      salary\n      description\n      requirements\n      responsibilities\n      benefits\n      status\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      applications {\n        nextToken\n        __typename\n      }\n      tests {\n        nextToken\n        __typename\n      }\n      videoTests {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      closingDate\n      __typename\n    }\n  }\n`;\nconst deleteJob = /* GraphQL */ `\n  mutation DeleteJob(\n    $input: DeleteJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    deleteJob(input: $input, condition: $condition) {\n      id\n      title\n      department\n      location\n      type\n      salary\n      description\n      requirements\n      responsibilities\n      benefits\n      status\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      applications {\n        nextToken\n        __typename\n      }\n      tests {\n        nextToken\n        __typename\n      }\n      videoTests {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      closingDate\n      __typename\n    }\n  }\n`;\nconst createApplication = /* GraphQL */ `\n  mutation CreateApplication(\n    $input: CreateApplicationInput!\n    $condition: ModelApplicationConditionInput\n  ) {\n    createApplication(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      appliedAt\n      currentStage\n      overallStatus\n      applicationStatus\n      writtenTestStatus\n      videoTestStatus\n      interviewStatus\n      feedback\n      internalNotes\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateApplication = /* GraphQL */ `\n  mutation UpdateApplication(\n    $input: UpdateApplicationInput!\n    $condition: ModelApplicationConditionInput\n  ) {\n    updateApplication(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      appliedAt\n      currentStage\n      overallStatus\n      applicationStatus\n      writtenTestStatus\n      videoTestStatus\n      interviewStatus\n      feedback\n      internalNotes\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteApplication = /* GraphQL */ `\n  mutation DeleteApplication(\n    $input: DeleteApplicationInput!\n    $condition: ModelApplicationConditionInput\n  ) {\n    deleteApplication(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      appliedAt\n      currentStage\n      overallStatus\n      applicationStatus\n      writtenTestStatus\n      videoTestStatus\n      interviewStatus\n      feedback\n      internalNotes\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createTest = /* GraphQL */ `\n  mutation CreateTest(\n    $input: CreateTestInput!\n    $condition: ModelTestConditionInput\n  ) {\n    createTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      timeLimit\n      totalPoints\n      passingScore\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateTest = /* GraphQL */ `\n  mutation UpdateTest(\n    $input: UpdateTestInput!\n    $condition: ModelTestConditionInput\n  ) {\n    updateTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      timeLimit\n      totalPoints\n      passingScore\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteTest = /* GraphQL */ `\n  mutation DeleteTest(\n    $input: DeleteTestInput!\n    $condition: ModelTestConditionInput\n  ) {\n    deleteTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      timeLimit\n      totalPoints\n      passingScore\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createTestAttempt = /* GraphQL */ `\n  mutation CreateTestAttempt(\n    $input: CreateTestAttemptInput!\n    $condition: ModelTestAttemptConditionInput\n  ) {\n    createTestAttempt(input: $input, condition: $condition) {\n      id\n      testId\n      test {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      timeRemaining\n      status\n      answers\n      score\n      percentage\n      passed\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateTestAttempt = /* GraphQL */ `\n  mutation UpdateTestAttempt(\n    $input: UpdateTestAttemptInput!\n    $condition: ModelTestAttemptConditionInput\n  ) {\n    updateTestAttempt(input: $input, condition: $condition) {\n      id\n      testId\n      test {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      timeRemaining\n      status\n      answers\n      score\n      percentage\n      passed\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteTestAttempt = /* GraphQL */ `\n  mutation DeleteTestAttempt(\n    $input: DeleteTestAttemptInput!\n    $condition: ModelTestAttemptConditionInput\n  ) {\n    deleteTestAttempt(input: $input, condition: $condition) {\n      id\n      testId\n      test {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      timeRemaining\n      status\n      answers\n      score\n      percentage\n      passed\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createVideoTest = /* GraphQL */ `\n  mutation CreateVideoTest(\n    $input: CreateVideoTestInput!\n    $condition: ModelVideoTestConditionInput\n  ) {\n    createVideoTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      totalPoints\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateVideoTest = /* GraphQL */ `\n  mutation UpdateVideoTest(\n    $input: UpdateVideoTestInput!\n    $condition: ModelVideoTestConditionInput\n  ) {\n    updateVideoTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      totalPoints\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteVideoTest = /* GraphQL */ `\n  mutation DeleteVideoTest(\n    $input: DeleteVideoTestInput!\n    $condition: ModelVideoTestConditionInput\n  ) {\n    deleteVideoTest(input: $input, condition: $condition) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      totalPoints\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createVideoTestAttempt = /* GraphQL */ `\n  mutation CreateVideoTestAttempt(\n    $input: CreateVideoTestAttemptInput!\n    $condition: ModelVideoTestAttemptConditionInput\n  ) {\n    createVideoTestAttempt(input: $input, condition: $condition) {\n      id\n      videoTestId\n      videoTest {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      status\n      currentQuestionIndex\n      recordings\n      totalScore\n      feedback\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateVideoTestAttempt = /* GraphQL */ `\n  mutation UpdateVideoTestAttempt(\n    $input: UpdateVideoTestAttemptInput!\n    $condition: ModelVideoTestAttemptConditionInput\n  ) {\n    updateVideoTestAttempt(input: $input, condition: $condition) {\n      id\n      videoTestId\n      videoTest {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      status\n      currentQuestionIndex\n      recordings\n      totalScore\n      feedback\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteVideoTestAttempt = /* GraphQL */ `\n  mutation DeleteVideoTestAttempt(\n    $input: DeleteVideoTestAttemptInput!\n    $condition: ModelVideoTestAttemptConditionInput\n  ) {\n    deleteVideoTestAttempt(input: $input, condition: $condition) {\n      id\n      videoTestId\n      videoTest {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      status\n      currentQuestionIndex\n      recordings\n      totalScore\n      feedback\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst createInterview = /* GraphQL */ `\n  mutation CreateInterview(\n    $input: CreateInterviewInput!\n    $condition: ModelInterviewConditionInput\n  ) {\n    createInterview(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduledAt\n      duration\n      type\n      status\n      meetingUrl\n      interviewerNotes\n      candidateFeedback\n      finalScore\n      recommendation\n      interviewers\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst updateInterview = /* GraphQL */ `\n  mutation UpdateInterview(\n    $input: UpdateInterviewInput!\n    $condition: ModelInterviewConditionInput\n  ) {\n    updateInterview(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduledAt\n      duration\n      type\n      status\n      meetingUrl\n      interviewerNotes\n      candidateFeedback\n      finalScore\n      recommendation\n      interviewers\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst deleteInterview = /* GraphQL */ `\n  mutation DeleteInterview(\n    $input: DeleteInterviewInput!\n    $condition: ModelInterviewConditionInput\n  ) {\n    deleteInterview(input: $input, condition: $condition) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduledAt\n      duration\n      type\n      status\n      meetingUrl\n      interviewerNotes\n      candidateFeedback\n      finalScore\n      recommendation\n      interviewers\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/graphql/mutations.js\n");

/***/ }),

/***/ "(ssr)/./src/graphql/queries.js":
/*!********************************!*\
  !*** ./src/graphql/queries.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applicationsByCandidateId: () => (/* binding */ applicationsByCandidateId),\n/* harmony export */   applicationsByJobId: () => (/* binding */ applicationsByJobId),\n/* harmony export */   companiesByEmail: () => (/* binding */ companiesByEmail),\n/* harmony export */   getApplication: () => (/* binding */ getApplication),\n/* harmony export */   getCompany: () => (/* binding */ getCompany),\n/* harmony export */   getInterview: () => (/* binding */ getInterview),\n/* harmony export */   getJob: () => (/* binding */ getJob),\n/* harmony export */   getTest: () => (/* binding */ getTest),\n/* harmony export */   getTestAttempt: () => (/* binding */ getTestAttempt),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getVideoTest: () => (/* binding */ getVideoTest),\n/* harmony export */   getVideoTestAttempt: () => (/* binding */ getVideoTestAttempt),\n/* harmony export */   interviewsByApplicationId: () => (/* binding */ interviewsByApplicationId),\n/* harmony export */   interviewsByCandidateId: () => (/* binding */ interviewsByCandidateId),\n/* harmony export */   jobsByCompanyId: () => (/* binding */ jobsByCompanyId),\n/* harmony export */   listApplications: () => (/* binding */ listApplications),\n/* harmony export */   listCompanies: () => (/* binding */ listCompanies),\n/* harmony export */   listInterviews: () => (/* binding */ listInterviews),\n/* harmony export */   listJobs: () => (/* binding */ listJobs),\n/* harmony export */   listTestAttempts: () => (/* binding */ listTestAttempts),\n/* harmony export */   listTests: () => (/* binding */ listTests),\n/* harmony export */   listUsers: () => (/* binding */ listUsers),\n/* harmony export */   listVideoTestAttempts: () => (/* binding */ listVideoTestAttempts),\n/* harmony export */   listVideoTests: () => (/* binding */ listVideoTests),\n/* harmony export */   testAttemptsByApplicationId: () => (/* binding */ testAttemptsByApplicationId),\n/* harmony export */   testAttemptsByCandidateId: () => (/* binding */ testAttemptsByCandidateId),\n/* harmony export */   testAttemptsByTestId: () => (/* binding */ testAttemptsByTestId),\n/* harmony export */   testsByJobId: () => (/* binding */ testsByJobId),\n/* harmony export */   usersByApprovalStatus: () => (/* binding */ usersByApprovalStatus),\n/* harmony export */   usersByCompanyId: () => (/* binding */ usersByCompanyId),\n/* harmony export */   usersByEmail: () => (/* binding */ usersByEmail),\n/* harmony export */   usersBySub: () => (/* binding */ usersBySub),\n/* harmony export */   videoTestAttemptsByApplicationId: () => (/* binding */ videoTestAttemptsByApplicationId),\n/* harmony export */   videoTestAttemptsByCandidateId: () => (/* binding */ videoTestAttemptsByCandidateId),\n/* harmony export */   videoTestAttemptsByVideoTestId: () => (/* binding */ videoTestAttemptsByVideoTestId),\n/* harmony export */   videoTestsByJobId: () => (/* binding */ videoTestsByJobId)\n/* harmony export */ });\n/* eslint-disable */ // this is an auto generated file. This will be overwritten\nconst getUser = /* GraphQL */ `\n  query GetUser($id: ID!) {\n    getUser(id: $id) {\n      id\n      sub\n      email\n      firstName\n      lastName\n      phone\n      role\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      lastLoginAt\n      createdAt\n      updatedAt\n      approvalStatus\n      approvedAt\n      approvedBy\n      approvalNotes\n      rejectedAt\n      rejectedBy\n      rejectionReason\n      resume\n      applications {\n        nextToken\n        __typename\n      }\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      __typename\n    }\n  }\n`;\nconst listUsers = /* GraphQL */ `\n  query ListUsers(\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst usersBySub = /* GraphQL */ `\n  query UsersBySub(\n    $sub: String!\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersBySub(\n      sub: $sub\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst usersByEmail = /* GraphQL */ `\n  query UsersByEmail(\n    $email: String!\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByEmail(\n      email: $email\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst usersByCompanyId = /* GraphQL */ `\n  query UsersByCompanyId(\n    $companyId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByCompanyId(\n      companyId: $companyId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst usersByApprovalStatus = /* GraphQL */ `\n  query UsersByApprovalStatus(\n    $approvalStatus: ApprovalStatus!\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByApprovalStatus(\n      approvalStatus: $approvalStatus\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getCompany = /* GraphQL */ `\n  query GetCompany($id: ID!) {\n    getCompany(id: $id) {\n      id\n      name\n      email\n      phone\n      address\n      website\n      logo\n      description\n      isActive\n      admins {\n        nextToken\n        __typename\n      }\n      jobs {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listCompanies = /* GraphQL */ `\n  query ListCompanies(\n    $filter: ModelCompanyFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listCompanies(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst companiesByEmail = /* GraphQL */ `\n  query CompaniesByEmail(\n    $email: String!\n    $sortDirection: ModelSortDirection\n    $filter: ModelCompanyFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    companiesByEmail(\n      email: $email\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getJob = /* GraphQL */ `\n  query GetJob($id: ID!) {\n    getJob(id: $id) {\n      id\n      title\n      department\n      location\n      type\n      salary\n      description\n      requirements\n      responsibilities\n      benefits\n      status\n      companyId\n      company {\n        id\n        name\n        email\n        phone\n        address\n        website\n        logo\n        description\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      applications {\n        nextToken\n        __typename\n      }\n      tests {\n        nextToken\n        __typename\n      }\n      videoTests {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      closingDate\n      __typename\n    }\n  }\n`;\nconst listJobs = /* GraphQL */ `\n  query ListJobs(\n    $filter: ModelJobFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listJobs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst jobsByCompanyId = /* GraphQL */ `\n  query JobsByCompanyId(\n    $companyId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelJobFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    jobsByCompanyId(\n      companyId: $companyId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getApplication = /* GraphQL */ `\n  query GetApplication($id: ID!) {\n    getApplication(id: $id) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      appliedAt\n      currentStage\n      overallStatus\n      applicationStatus\n      writtenTestStatus\n      videoTestStatus\n      interviewStatus\n      feedback\n      internalNotes\n      testAttempts {\n        nextToken\n        __typename\n      }\n      videoTestAttempts {\n        nextToken\n        __typename\n      }\n      interviews {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listApplications = /* GraphQL */ `\n  query ListApplications(\n    $filter: ModelApplicationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listApplications(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst applicationsByCandidateId = /* GraphQL */ `\n  query ApplicationsByCandidateId(\n    $candidateId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelApplicationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    applicationsByCandidateId(\n      candidateId: $candidateId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst applicationsByJobId = /* GraphQL */ `\n  query ApplicationsByJobId(\n    $jobId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelApplicationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    applicationsByJobId(\n      jobId: $jobId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getTest = /* GraphQL */ `\n  query GetTest($id: ID!) {\n    getTest(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      timeLimit\n      totalPoints\n      passingScore\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listTests = /* GraphQL */ `\n  query ListTests(\n    $filter: ModelTestFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTests(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst testsByJobId = /* GraphQL */ `\n  query TestsByJobId(\n    $jobId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelTestFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    testsByJobId(\n      jobId: $jobId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getTestAttempt = /* GraphQL */ `\n  query GetTestAttempt($id: ID!) {\n    getTestAttempt(id: $id) {\n      id\n      testId\n      test {\n        id\n        jobId\n        title\n        description\n        instructions\n        timeLimit\n        totalPoints\n        passingScore\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      timeRemaining\n      status\n      answers\n      score\n      percentage\n      passed\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listTestAttempts = /* GraphQL */ `\n  query ListTestAttempts(\n    $filter: ModelTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTestAttempts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        testId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        timeRemaining\n        status\n        answers\n        score\n        percentage\n        passed\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst testAttemptsByTestId = /* GraphQL */ `\n  query TestAttemptsByTestId(\n    $testId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    testAttemptsByTestId(\n      testId: $testId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        testId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        timeRemaining\n        status\n        answers\n        score\n        percentage\n        passed\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst testAttemptsByCandidateId = /* GraphQL */ `\n  query TestAttemptsByCandidateId(\n    $candidateId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    testAttemptsByCandidateId(\n      candidateId: $candidateId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        testId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        timeRemaining\n        status\n        answers\n        score\n        percentage\n        passed\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst testAttemptsByApplicationId = /* GraphQL */ `\n  query TestAttemptsByApplicationId(\n    $applicationId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    testAttemptsByApplicationId(\n      applicationId: $applicationId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        testId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        timeRemaining\n        status\n        answers\n        score\n        percentage\n        passed\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getVideoTest = /* GraphQL */ `\n  query GetVideoTest($id: ID!) {\n    getVideoTest(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        department\n        location\n        type\n        salary\n        description\n        requirements\n        responsibilities\n        benefits\n        status\n        companyId\n        createdAt\n        updatedAt\n        closingDate\n        __typename\n      }\n      title\n      description\n      instructions\n      totalPoints\n      isActive\n      questions\n      attempts {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listVideoTests = /* GraphQL */ `\n  query ListVideoTests(\n    $filter: ModelVideoTestFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listVideoTests(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst videoTestsByJobId = /* GraphQL */ `\n  query VideoTestsByJobId(\n    $jobId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelVideoTestFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    videoTestsByJobId(\n      jobId: $jobId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getVideoTestAttempt = /* GraphQL */ `\n  query GetVideoTestAttempt($id: ID!) {\n    getVideoTestAttempt(id: $id) {\n      id\n      videoTestId\n      videoTest {\n        id\n        jobId\n        title\n        description\n        instructions\n        totalPoints\n        isActive\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      startedAt\n      completedAt\n      status\n      currentQuestionIndex\n      recordings\n      totalScore\n      feedback\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listVideoTestAttempts = /* GraphQL */ `\n  query ListVideoTestAttempts(\n    $filter: ModelVideoTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listVideoTestAttempts(\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        videoTestId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        status\n        currentQuestionIndex\n        recordings\n        totalScore\n        feedback\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst videoTestAttemptsByVideoTestId = /* GraphQL */ `\n  query VideoTestAttemptsByVideoTestId(\n    $videoTestId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelVideoTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    videoTestAttemptsByVideoTestId(\n      videoTestId: $videoTestId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        videoTestId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        status\n        currentQuestionIndex\n        recordings\n        totalScore\n        feedback\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst videoTestAttemptsByCandidateId = /* GraphQL */ `\n  query VideoTestAttemptsByCandidateId(\n    $candidateId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelVideoTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    videoTestAttemptsByCandidateId(\n      candidateId: $candidateId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        videoTestId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        status\n        currentQuestionIndex\n        recordings\n        totalScore\n        feedback\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst videoTestAttemptsByApplicationId = /* GraphQL */ `\n  query VideoTestAttemptsByApplicationId(\n    $applicationId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelVideoTestAttemptFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    videoTestAttemptsByApplicationId(\n      applicationId: $applicationId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        videoTestId\n        candidateId\n        applicationId\n        startedAt\n        completedAt\n        status\n        currentQuestionIndex\n        recordings\n        totalScore\n        feedback\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst getInterview = /* GraphQL */ `\n  query GetInterview($id: ID!) {\n    getInterview(id: $id) {\n      id\n      candidateId\n      candidate {\n        id\n        sub\n        email\n        firstName\n        lastName\n        phone\n        role\n        companyId\n        isActive\n        lastLoginAt\n        createdAt\n        updatedAt\n        approvalStatus\n        approvedAt\n        approvedBy\n        approvalNotes\n        rejectedAt\n        rejectedBy\n        rejectionReason\n        resume\n        __typename\n      }\n      applicationId\n      application {\n        id\n        candidateId\n        jobId\n        appliedAt\n        currentStage\n        overallStatus\n        applicationStatus\n        writtenTestStatus\n        videoTestStatus\n        interviewStatus\n        feedback\n        internalNotes\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduledAt\n      duration\n      type\n      status\n      meetingUrl\n      interviewerNotes\n      candidateFeedback\n      finalScore\n      recommendation\n      interviewers\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n`;\nconst listInterviews = /* GraphQL */ `\n  query ListInterviews(\n    $filter: ModelInterviewFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listInterviews(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        candidateId\n        applicationId\n        scheduledAt\n        duration\n        type\n        status\n        meetingUrl\n        interviewerNotes\n        candidateFeedback\n        finalScore\n        recommendation\n        interviewers\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst interviewsByCandidateId = /* GraphQL */ `\n  query InterviewsByCandidateId(\n    $candidateId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelInterviewFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    interviewsByCandidateId(\n      candidateId: $candidateId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        candidateId\n        applicationId\n        scheduledAt\n        duration\n        type\n        status\n        meetingUrl\n        interviewerNotes\n        candidateFeedback\n        finalScore\n        recommendation\n        interviewers\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\nconst interviewsByApplicationId = /* GraphQL */ `\n  query InterviewsByApplicationId(\n    $applicationId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelInterviewFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    interviewsByApplicationId(\n      applicationId: $applicationId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        candidateId\n        applicationId\n        scheduledAt\n        duration\n        type\n        status\n        meetingUrl\n        interviewerNotes\n        candidateFeedback\n        finalScore\n        recommendation\n        interviewers\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/graphql/queries.js\n");

/***/ }),

/***/ "(ssr)/./src/lib/mockServices.ts":
/*!*********************************!*\
  !*** ./src/lib/mockServices.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearMockMode: () => (/* binding */ clearMockMode),\n/* harmony export */   getMockUser: () => (/* binding */ getMockUser),\n/* harmony export */   isMockMode: () => (/* binding */ isMockMode),\n/* harmony export */   mockCompanyService: () => (/* binding */ mockCompanyService),\n/* harmony export */   mockUserService: () => (/* binding */ mockUserService),\n/* harmony export */   setMockMode: () => (/* binding */ setMockMode)\n/* harmony export */ });\n// Mock services for demo mode\nconst isMockMode = ()=>{\n    if (true) return false;\n    const user = localStorage.getItem(\"demo_user\");\n    return user !== null;\n};\nconst setMockMode = (user)=>{\n    if (false) {}\n};\nconst getMockUser = ()=>{\n    if (true) return null;\n    const user = localStorage.getItem(\"demo_user\");\n    return user ? JSON.parse(user) : null;\n};\nconst clearMockMode = ()=>{\n    if (false) {}\n};\n// Mock user service functions\nconst mockUserService = {\n    async getUserBySub (sub) {\n        console.log(\"\\uD83C\\uDFAD Mock getUserBySub called with:\", sub);\n        return null; // Return null so it creates a new user record\n    },\n    async createUser (input) {\n        console.log(\"\\uD83C\\uDFAD Mock createUser called with:\", input);\n        return {\n            id: `demo-user-${Date.now()}`,\n            ...input,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n    },\n    async getUserByEmail (email) {\n        console.log(\"\\uD83C\\uDFAD Mock getUserByEmail called with:\", email);\n        return {\n            id: `demo-user-${Date.now()}`,\n            email,\n            firstName: email.split(\"@\")[0],\n            lastName: \"Demo\",\n            isActive: true\n        };\n    },\n    async getAllUsers () {\n        console.log(\"\\uD83C\\uDFAD Mock getAllUsers called\");\n        return [];\n    },\n    async updateUser (input) {\n        console.log(\"\\uD83C\\uDFAD Mock updateUser called with:\", input);\n        return {\n            ...input,\n            updatedAt: new Date().toISOString()\n        };\n    },\n    async deleteUser (id) {\n        console.log(\"\\uD83C\\uDFAD Mock deleteUser called with:\", id);\n    },\n    async toggleUserStatus (id, isActive) {\n        console.log(\"\\uD83C\\uDFAD Mock toggleUserStatus called with:\", id, isActive);\n        return {\n            id,\n            isActive,\n            updatedAt: new Date().toISOString()\n        };\n    }\n};\n// Mock company service functions  \nconst mockCompanyService = {\n    async createCompany (input) {\n        console.log(\"\\uD83C\\uDFAD Mock createCompany called with:\", input);\n        return {\n            id: `demo-company-${Date.now()}`,\n            ...input,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n    },\n    async getCompanyByEmail (email) {\n        console.log(\"\\uD83C\\uDFAD Mock getCompanyByEmail called with:\", email);\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL21vY2tTZXJ2aWNlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw4QkFBOEI7QUFDdkIsTUFBTUEsYUFBYTtJQUN4QixJQUFJLElBQWtCLEVBQWEsT0FBTztJQUMxQyxNQUFNQyxPQUFPQyxhQUFhQyxPQUFPLENBQUM7SUFDbEMsT0FBT0YsU0FBUztBQUNsQixFQUFFO0FBRUssTUFBTUcsY0FBYyxDQUFDSDtJQUMxQixJQUFJLEtBQWtCLEVBQWEsRUFFbEM7QUFDSCxFQUFFO0FBRUssTUFBTU8sY0FBYztJQUN6QixJQUFJLElBQWtCLEVBQWEsT0FBTztJQUMxQyxNQUFNUCxPQUFPQyxhQUFhQyxPQUFPLENBQUM7SUFDbEMsT0FBT0YsT0FBT0ssS0FBS0csS0FBSyxDQUFDUixRQUFRO0FBQ25DLEVBQUU7QUFFSyxNQUFNUyxnQkFBZ0I7SUFDM0IsSUFBSSxLQUFrQixFQUFhLEVBRWxDO0FBQ0gsRUFBRTtBQUVGLDhCQUE4QjtBQUN2QixNQUFNRSxrQkFBa0I7SUFDN0IsTUFBTUMsY0FBYUMsR0FBVztRQUM1QkMsUUFBUUMsR0FBRyxDQUFDLCtDQUFxQ0Y7UUFDakQsT0FBTyxNQUFNLDhDQUE4QztJQUM3RDtJQUVBLE1BQU1HLFlBQVdDLEtBQVU7UUFDekJILFFBQVFDLEdBQUcsQ0FBQyw2Q0FBbUNFO1FBQy9DLE9BQU87WUFDTEMsSUFBSSxDQUFDLFVBQVUsRUFBRUMsS0FBS0MsR0FBRyxHQUFHLENBQUM7WUFDN0IsR0FBR0gsS0FBSztZQUNSSSxXQUFXLElBQUlGLE9BQU9HLFdBQVc7WUFDakNDLFdBQVcsSUFBSUosT0FBT0csV0FBVztRQUNuQztJQUNGO0lBRUEsTUFBTUUsZ0JBQWVDLEtBQWE7UUFDaENYLFFBQVFDLEdBQUcsQ0FBQyxpREFBdUNVO1FBQ25ELE9BQU87WUFDTFAsSUFBSSxDQUFDLFVBQVUsRUFBRUMsS0FBS0MsR0FBRyxHQUFHLENBQUM7WUFDN0JLO1lBQ0FDLFdBQVdELE1BQU1FLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QkMsVUFBVTtZQUNWQyxVQUFVO1FBQ1o7SUFDRjtJQUVBLE1BQU1DO1FBQ0poQixRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPLEVBQUU7SUFDWDtJQUVBLE1BQU1nQixZQUFXZCxLQUFVO1FBQ3pCSCxRQUFRQyxHQUFHLENBQUMsNkNBQW1DRTtRQUMvQyxPQUFPO1lBQUUsR0FBR0EsS0FBSztZQUFFTSxXQUFXLElBQUlKLE9BQU9HLFdBQVc7UUFBRztJQUN6RDtJQUVBLE1BQU1VLFlBQVdkLEVBQVU7UUFDekJKLFFBQVFDLEdBQUcsQ0FBQyw2Q0FBbUNHO0lBQ2pEO0lBRUEsTUFBTWUsa0JBQWlCZixFQUFVLEVBQUVXLFFBQWlCO1FBQ2xEZixRQUFRQyxHQUFHLENBQUMsbURBQXlDRyxJQUFJVztRQUN6RCxPQUFPO1lBQUVYO1lBQUlXO1lBQVVOLFdBQVcsSUFBSUosT0FBT0csV0FBVztRQUFHO0lBQzdEO0FBQ0YsRUFBRTtBQUVGLG1DQUFtQztBQUM1QixNQUFNWSxxQkFBcUI7SUFDaEMsTUFBTUMsZUFBY2xCLEtBQVU7UUFDNUJILFFBQVFDLEdBQUcsQ0FBQyxnREFBc0NFO1FBQ2xELE9BQU87WUFDTEMsSUFBSSxDQUFDLGFBQWEsRUFBRUMsS0FBS0MsR0FBRyxHQUFHLENBQUM7WUFDaEMsR0FBR0gsS0FBSztZQUNSSSxXQUFXLElBQUlGLE9BQU9HLFdBQVc7WUFDakNDLFdBQVcsSUFBSUosT0FBT0csV0FBVztRQUNuQztJQUNGO0lBRUEsTUFBTWMsbUJBQWtCWCxLQUFhO1FBQ25DWCxRQUFRQyxHQUFHLENBQUMsb0RBQTBDVTtRQUN0RCxPQUFPO0lBQ1Q7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW50ZXJ2aWV3LXNhYXMvLi9zcmMvbGliL21vY2tTZXJ2aWNlcy50cz80ZWZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vY2sgc2VydmljZXMgZm9yIGRlbW8gbW9kZVxuZXhwb3J0IGNvbnN0IGlzTW9ja01vZGUgPSAoKTogYm9vbGVhbiA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICBjb25zdCB1c2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RlbW9fdXNlcicpO1xuICByZXR1cm4gdXNlciAhPT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRNb2NrTW9kZSA9ICh1c2VyOiBhbnkpID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RlbW9fdXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldE1vY2tVc2VyID0gKCkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBudWxsO1xuICBjb25zdCB1c2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RlbW9fdXNlcicpO1xuICByZXR1cm4gdXNlciA/IEpTT04ucGFyc2UodXNlcikgOiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyTW9ja01vZGUgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdkZW1vX3VzZXInKTtcbiAgfVxufTtcblxuLy8gTW9jayB1c2VyIHNlcnZpY2UgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgbW9ja1VzZXJTZXJ2aWNlID0ge1xuICBhc3luYyBnZXRVc2VyQnlTdWIoc3ViOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZygn8J+OrSBNb2NrIGdldFVzZXJCeVN1YiBjYWxsZWQgd2l0aDonLCBzdWIpO1xuICAgIHJldHVybiBudWxsOyAvLyBSZXR1cm4gbnVsbCBzbyBpdCBjcmVhdGVzIGEgbmV3IHVzZXIgcmVjb3JkXG4gIH0sXG5cbiAgYXN5bmMgY3JlYXRlVXNlcihpbnB1dDogYW55KSB7XG4gICAgY29uc29sZS5sb2coJ/Cfjq0gTW9jayBjcmVhdGVVc2VyIGNhbGxlZCB3aXRoOicsIGlucHV0KTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGBkZW1vLXVzZXItJHtEYXRlLm5vdygpfWAsXG4gICAgICAuLi5pbnB1dCxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcbiAgfSxcblxuICBhc3luYyBnZXRVc2VyQnlFbWFpbChlbWFpbDogc3RyaW5nKSB7XG4gICAgY29uc29sZS5sb2coJ/Cfjq0gTW9jayBnZXRVc2VyQnlFbWFpbCBjYWxsZWQgd2l0aDonLCBlbWFpbCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBgZGVtby11c2VyLSR7RGF0ZS5ub3coKX1gLFxuICAgICAgZW1haWwsXG4gICAgICBmaXJzdE5hbWU6IGVtYWlsLnNwbGl0KCdAJylbMF0sXG4gICAgICBsYXN0TmFtZTogJ0RlbW8nLFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgfTtcbiAgfSxcblxuICBhc3luYyBnZXRBbGxVc2VycygpIHtcbiAgICBjb25zb2xlLmxvZygn8J+OrSBNb2NrIGdldEFsbFVzZXJzIGNhbGxlZCcpO1xuICAgIHJldHVybiBbXTtcbiAgfSxcblxuICBhc3luYyB1cGRhdGVVc2VyKGlucHV0OiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygn8J+OrSBNb2NrIHVwZGF0ZVVzZXIgY2FsbGVkIHdpdGg6JywgaW5wdXQpO1xuICAgIHJldHVybiB7IC4uLmlucHV0LCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9O1xuICB9LFxuXG4gIGFzeW5jIGRlbGV0ZVVzZXIoaWQ6IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKCfwn46tIE1vY2sgZGVsZXRlVXNlciBjYWxsZWQgd2l0aDonLCBpZCk7XG4gIH0sXG5cbiAgYXN5bmMgdG9nZ2xlVXNlclN0YXR1cyhpZDogc3RyaW5nLCBpc0FjdGl2ZTogYm9vbGVhbikge1xuICAgIGNvbnNvbGUubG9nKCfwn46tIE1vY2sgdG9nZ2xlVXNlclN0YXR1cyBjYWxsZWQgd2l0aDonLCBpZCwgaXNBY3RpdmUpO1xuICAgIHJldHVybiB7IGlkLCBpc0FjdGl2ZSwgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfTtcbiAgfVxufTtcblxuLy8gTW9jayBjb21wYW55IHNlcnZpY2UgZnVuY3Rpb25zICBcbmV4cG9ydCBjb25zdCBtb2NrQ29tcGFueVNlcnZpY2UgPSB7XG4gIGFzeW5jIGNyZWF0ZUNvbXBhbnkoaW5wdXQ6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKCfwn46tIE1vY2sgY3JlYXRlQ29tcGFueSBjYWxsZWQgd2l0aDonLCBpbnB1dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBgZGVtby1jb21wYW55LSR7RGF0ZS5ub3coKX1gLFxuICAgICAgLi4uaW5wdXQsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH07XG4gIH0sXG5cbiAgYXN5bmMgZ2V0Q29tcGFueUJ5RW1haWwoZW1haWw6IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKCfwn46tIE1vY2sgZ2V0Q29tcGFueUJ5RW1haWwgY2FsbGVkIHdpdGg6JywgZW1haWwpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59OyJdLCJuYW1lcyI6WyJpc01vY2tNb2RlIiwidXNlciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRNb2NrTW9kZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0TW9ja1VzZXIiLCJwYXJzZSIsImNsZWFyTW9ja01vZGUiLCJyZW1vdmVJdGVtIiwibW9ja1VzZXJTZXJ2aWNlIiwiZ2V0VXNlckJ5U3ViIiwic3ViIiwiY29uc29sZSIsImxvZyIsImNyZWF0ZVVzZXIiLCJpbnB1dCIsImlkIiwiRGF0ZSIsIm5vdyIsImNyZWF0ZWRBdCIsInRvSVNPU3RyaW5nIiwidXBkYXRlZEF0IiwiZ2V0VXNlckJ5RW1haWwiLCJlbWFpbCIsImZpcnN0TmFtZSIsInNwbGl0IiwibGFzdE5hbWUiLCJpc0FjdGl2ZSIsImdldEFsbFVzZXJzIiwidXBkYXRlVXNlciIsImRlbGV0ZVVzZXIiLCJ0b2dnbGVVc2VyU3RhdHVzIiwibW9ja0NvbXBhbnlTZXJ2aWNlIiwiY3JlYXRlQ29tcGFueSIsImdldENvbXBhbnlCeUVtYWlsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/mockServices.ts\n");

/***/ }),

/***/ "(ssr)/./src/services/userService.ts":
/*!*************************************!*\
  !*** ./src/services/userService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userService: () => (/* binding */ userService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify/api */ \"aws-amplify/api\");\n/* harmony import */ var aws_amplify_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _graphql_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/graphql/queries */ \"(ssr)/./src/graphql/queries.js\");\n/* harmony import */ var _graphql_mutations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/graphql/mutations */ \"(ssr)/./src/graphql/mutations.js\");\n/* harmony import */ var _lib_mockServices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/mockServices */ \"(ssr)/./src/lib/mockServices.ts\");\n// File: src/services/userService.ts\n\n\n\n\nconst client = (0,aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__.generateClient)({\n    authMode: \"userPool\"\n});\nconst userService = {\n    // Get user by ID\n    async getUserById (id) {\n        if ((0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.isMockMode)()) {\n            return _lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.mockUserService.getUserByEmail(`${id}@demo.com`);\n        }\n        try {\n            const result = await client.graphql({\n                query: _graphql_queries__WEBPACK_IMPORTED_MODULE_1__.getUser,\n                variables: {\n                    id\n                }\n            });\n            return result.data.getUser;\n        } catch (error) {\n            console.error(\"Error fetching user:\", error);\n            throw error;\n        }\n    },\n    // Get user by email\n    async getUserByEmail (email) {\n        if ((0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.isMockMode)()) {\n            return _lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.mockUserService.getUserByEmail(email);\n        }\n        try {\n            const result = await client.graphql({\n                query: _graphql_queries__WEBPACK_IMPORTED_MODULE_1__.listUsers,\n                variables: {\n                    filter: {\n                        email: {\n                            eq: email\n                        }\n                    }\n                }\n            });\n            const users = result.data.listUsers.items;\n            return users.length > 0 ? users[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching user by email:\", error);\n            throw error;\n        }\n    },\n    // Get user by Cognito sub\n    async getUserBySub (sub) {\n        if ((0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.isMockMode)()) {\n            return _lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.mockUserService.getUserBySub(sub);\n        }\n        try {\n            const result = await client.graphql({\n                query: _graphql_queries__WEBPACK_IMPORTED_MODULE_1__.listUsers,\n                variables: {\n                    filter: {\n                        sub: {\n                            eq: sub\n                        }\n                    }\n                }\n            });\n            const users = result.data.listUsers.items;\n            return users.length > 0 ? users[0] : null;\n        } catch (error) {\n            console.error(\"Error fetching user by sub:\", error);\n            throw error;\n        }\n    },\n    // Create a new user\n    async createUser (input) {\n        if ((0,_lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.isMockMode)()) {\n            return _lib_mockServices__WEBPACK_IMPORTED_MODULE_3__.mockUserService.createUser(input);\n        }\n        try {\n            const result = await client.graphql({\n                query: _graphql_mutations__WEBPACK_IMPORTED_MODULE_2__.createUser,\n                variables: {\n                    input\n                }\n            });\n            return result.data.createUser;\n        } catch (error) {\n            console.error(\"Error creating user:\", error);\n            throw error;\n        }\n    },\n    // Update user profile\n    async updateUser (input) {\n        try {\n            const result = await client.graphql({\n                query: _graphql_mutations__WEBPACK_IMPORTED_MODULE_2__.updateUser,\n                variables: {\n                    input\n                }\n            });\n            return result.data.updateUser;\n        } catch (error) {\n            console.error(\"Error updating user:\", error);\n            throw error;\n        }\n    },\n    // Update user resume\n    async updateUserResume (id, resumeKey) {\n        return this.updateUser({\n            id,\n            resume: resumeKey\n        });\n    },\n    // Get all users (super admin only)\n    async getAllUsers () {\n        try {\n            const result = await client.graphql({\n                query: _graphql_queries__WEBPACK_IMPORTED_MODULE_1__.listUsers\n            });\n            return result.data.listUsers.items;\n        } catch (error) {\n            console.error(\"Error fetching users:\", error);\n            throw error;\n        }\n    },\n    // Delete user (super admin only)\n    async deleteUser (id) {\n        try {\n            await client.graphql({\n                query: _graphql_mutations__WEBPACK_IMPORTED_MODULE_2__.deleteUser,\n                variables: {\n                    input: {\n                        id\n                    }\n                }\n            });\n        } catch (error) {\n            console.error(\"Error deleting user:\", error);\n            throw error;\n        }\n    },\n    // Toggle user active status\n    async toggleUserStatus (id, isActive) {\n        return this.updateUser({\n            id,\n            isActive\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/services/userService.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"202c2e267b67\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2dsb2JhbHMuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW50ZXJ2aWV3LXNhYXMvLi9zcmMvYXBwL2dsb2JhbHMuY3NzPzg4YWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyMDJjMmUyNjdiNjdcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/globals.css\n");

/***/ }),

/***/ "(rsc)/./src/app/layout.tsx":
/*!****************************!*\
  !*** ./src/app/layout.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.css */ \"(rsc)/./src/app/globals.css\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(rsc)/./src/contexts/AuthContext.tsx\");\n//src/app/layout.tsx\n\n\n\n\nconst metadata = {\n    title: \"Interview Management Platform\",\n    description: \"Comprehensive interview management SaaS platform\"\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            className: (next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3___default().className),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__.AuthProvider, {\n                children: children\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\layout.tsx\",\n                lineNumber: 22,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\layout.tsx\",\n            lineNumber: 21,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\akabo\\\\OneDrive\\\\Documents\\\\abhh\\\\src\\\\app\\\\layout.tsx\",\n        lineNumber: 20,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2xheW91dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxvQkFBb0I7O0FBTWRBO0FBSGlCO0FBQytCO0FBSS9DLE1BQU1FLFdBQXFCO0lBQ2hDQyxPQUFPO0lBQ1BDLGFBQWE7QUFDZixFQUFFO0FBRWEsU0FBU0MsV0FBVyxFQUNqQ0MsUUFBUSxFQUdUO0lBQ0MscUJBQ0UsOERBQUNDO1FBQUtDLE1BQUs7a0JBQ1QsNEVBQUNDO1lBQUtDLFdBQVdWLCtKQUFlO3NCQUM5Qiw0RUFBQ0MsK0RBQVlBOzBCQUFFSzs7Ozs7Ozs7Ozs7Ozs7OztBQUl2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludGVydmlldy1zYWFzLy4vc3JjL2FwcC9sYXlvdXQudHN4PzU3YTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy9zcmMvYXBwL2xheW91dC50c3hcclxuaW1wb3J0IHR5cGUgeyBNZXRhZGF0YSB9IGZyb20gXCJuZXh0XCI7XHJcbmltcG9ydCB7IEludGVyIH0gZnJvbSBcIm5leHQvZm9udC9nb29nbGVcIjtcclxuaW1wb3J0IFwiLi9nbG9iYWxzLmNzc1wiO1xyXG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tIFwiQC9jb250ZXh0cy9BdXRoQ29udGV4dFwiO1xyXG5cclxuY29uc3QgaW50ZXIgPSBJbnRlcih7IHN1YnNldHM6IFtcImxhdGluXCJdIH0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1ldGFkYXRhOiBNZXRhZGF0YSA9IHtcclxuICB0aXRsZTogXCJJbnRlcnZpZXcgTWFuYWdlbWVudCBQbGF0Zm9ybVwiLFxyXG4gIGRlc2NyaXB0aW9uOiBcIkNvbXByZWhlbnNpdmUgaW50ZXJ2aWV3IG1hbmFnZW1lbnQgU2FhUyBwbGF0Zm9ybVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XHJcbiAgY2hpbGRyZW4sXHJcbn06IHtcclxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xyXG59KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxodG1sIGxhbmc9XCJlblwiPlxyXG4gICAgICA8Ym9keSBjbGFzc05hbWU9e2ludGVyLmNsYXNzTmFtZX0+XHJcbiAgICAgICAgPEF1dGhQcm92aWRlcj57Y2hpbGRyZW59PC9BdXRoUHJvdmlkZXI+XHJcbiAgICAgIDwvYm9keT5cclxuICAgIDwvaHRtbD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJpbnRlciIsIkF1dGhQcm92aWRlciIsIm1ldGFkYXRhIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIlJvb3RMYXlvdXQiLCJjaGlsZHJlbiIsImh0bWwiLCJsYW5nIiwiYm9keSIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/layout.tsx\n");

/***/ }),

/***/ "(rsc)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $$typeof: () => (/* binding */ $$typeof),
/* harmony export */   __esModule: () => (/* binding */ __esModule),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\akabo\OneDrive\Documents\abhh\src\app\page.tsx`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\akabo\OneDrive\Documents\abhh\src\app\page.tsx#default`));


/***/ }),

/***/ "(rsc)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthProvider: () => (/* binding */ e1),
/* harmony export */   useAuth: () => (/* binding */ e0)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\akabo\OneDrive\Documents\abhh\src\contexts\AuthContext.tsx`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\akabo\OneDrive\Documents\abhh\src\contexts\AuthContext.tsx#useAuth`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\akabo\OneDrive\Documents\abhh\src\contexts\AuthContext.tsx#AuthProvider`);


/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cakabo%5COneDrive%5CDocuments%5Cabhh&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();